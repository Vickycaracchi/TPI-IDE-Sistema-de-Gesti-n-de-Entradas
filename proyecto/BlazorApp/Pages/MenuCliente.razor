@page "/menu-cliente"
@using DTOs
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav

<h3>Menú Cliente</h3>

<div class="row">
    <div class="col-3">
        <ul class="list-group">
            <li class="list-group-item list-group-item-action" @onclick="CargarProductos">Ver Productos</li>
            <li class="list-group-item list-group-item-action" @onclick="CargarEventos">Ver Eventos</li>
            <li class="list-group-item list-group-item-action" @onclick="CargarFiestas">Ver Fiestas</li>
            <li class="list-group-item list-group-item-action" @onclick="CargarMisCompras">Ver Mis Compras</li>
        </ul>
    </div>
    <div class="col-9 border p-3">
        @ComponenteActual
    </div>
</div>

@code {
    private RenderFragment? ComponenteActual { get; set; }
    private UsuarioDTO? usuario;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            // Redirigir si no está autenticado
            Nav.NavigateTo("/login");
            return;
        }

        // Obtener información del usuario desde los Claims
        usuario = new UsuarioDTO
        {
            Nombre = user.Identity.Name ?? "",
            Email = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value ?? "",
            Tipo = user.FindFirst(c => c.Type == "Tipo")?.Value ?? ""
            // Agregá Id u otros campos si los necesitás
        };
    }

    // Métodos para cada opción del menú
    void CargarProductos() => CargarComponente("productos");
    void CargarEventos() => CargarComponente("eventos");
    void CargarFiestas() => CargarComponente("fiestas");
    void CargarMisCompras() => CargarComponente("miscompras");

    private void CargarComponente(string opcion)
    {
        switch (opcion)
        {
            case "productos":
                ComponenteActual = builder =>
                {
                    builder.OpenComponent(0, typeof(ListarProductos));
                    builder.CloseComponent();
                };
                break;
            case "eventos":
                ComponenteActual = builder =>
                {
                    builder.OpenComponent(0, typeof(ListarEventos));
                    builder.CloseComponent();
                };
                break;
            case "fiestas":
                ComponenteActual = builder =>
                {
                    builder.OpenComponent(0, typeof(ListarFiestas));
                    builder.CloseComponent();
                };
                break;
            case "miscompras":
                ComponenteActual = builder =>
                {
                    builder.OpenComponent(0, typeof(ListarCompras));
                    builder.AddAttribute(1, "Usuario", usuario); // Pasar usuario como parámetro
                    builder.CloseComponent();
                };
                break;
        }
    }
}